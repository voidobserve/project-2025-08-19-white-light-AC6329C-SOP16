
# --------------Basic Setting-----------------------
#
#配置下载编译方式(/lto)
COMPLIE_MODE=lto

#配置下载CPU架构(/pi32/pi32v2/q32/q32s)
export CORE=pi32v2

#配置项目文件指向(br20/br21)
export CPU=br30

#配置项目的目标机器型号(generic(开发板)/...)
export BOARD=generic

#配置是否FPGA 验证平台(FPGA/CHIP)
export TYPE=CHIP
#export TYPE=FPGA

#配置下载匹配(br17sdk/br20_sdk/br21_sdk/br22_sdk/br23_sdk)
ifeq ($(TYPE),FPGA)
export NICKNAME=br30_sdk_fpga
else
export NICKNAME=br30_sdk
endif


export RTOS = FREE_RTOS
export SERVER_CORE = lite
export NEW_BREDR ?= y
export BR30_C_VERSION ?= n
export NEW_ECC ?= y
export THIRD_PARTY_PROFILE_ENABLE ?= y
export MOVABLE_ENABLE ?= n
export WIFI_DETECT_ENABLE ?= y

export CC_DEFINE += \
-DCONFIG_CPU_BR30 \
#-DCONFIG_RELEASE_ENABLE



export cibuild ?= n
ifeq ($(cibuild),y)
CC_DEFINE += -DCONFIG_RELEASE_ENABLE
else
ifeq ($(HOST_OS), linux)
CC_DEFINE += -D__SHELL__
endif
endif

ifeq ($(cibuild),y)
# release
export FLOAT_DEBUG ?= n
else
# debug
export FLOAT_DEBUG ?= y
endif

# -DCONFIG_PRINT_IN_MASK \

ifeq ($(TYPE),FPGA)
CC_DEFINE += -DCONFIG_FPGA_ENABLE
endif
ifeq ($(MOVABLE_ENABLE),y)
CC_DEFINE += -DCONFIG_MOVABLE_ENABLE
endif
ifeq ($(WIFI_DETECT_ENABLE),y)
CC_DEFINE += -DCONFIG_SUPPORT_WIFI_DETECT
endif
ifeq ($(NEW_BREDR),y)
CC_DEFINE += -DCONFIG_NEW_BREDR_ENABLE
endif

ifeq ($(BR30_C_VERSION),y)
CC_DEFINE += -DCONFIG_BR30_C_VERSION
endif

# --------------Project path Setting-----------------------
ifeq ($(RTOS),FREE_RTOS)
CC_DEFINE += -DCONFIG_FREE_RTOS_ENABLE
endif

CC_DEFINE += -DCONFIG_EQ_SUPPORT_ASYNC

-include apps$(SLASH)app_cfg

export OS_IN_MASKROM = y
export MEM_IN_MASKROM = y
export CVSD_CODEC_IN_MASKROM = y

export CONFIG_MMU_ENABLE = y

export CONFIG_PSRAM_ENABLE = n


#n:media_origin
#y:media_new
#d:media_develop代码开发整理
ifeq ($(APP_CASE), soundbox)
export MEDIA_NEW_ENABLE = d
export CPU_DIR=br30_develop
else ifeq ($(APP_CASE), adapter)
export MEDIA_NEW_ENABLE = d
export CPU_DIR=br30_develop
else
export MEDIA_NEW_ENABLE = y
export CPU_DIR=br30
endif

export CONFIG_SBC_CODEC_HW = y
export CONFIG_MSBC_CODEC_HW = y
export CONFIG_AAC_CODEC_HW = n
export CONFIG_ANC_ENABLE ?= y
#Automatic Speech Recognition
export CONFIG_ASR_ENABLE ?= y
export CONFIG_CURRENT_SOUND_DEAL?= y

#VER_PI32V2_V1  : BR22
#VER_PI32V2_V2  : BR25 BR30
#VER_PI32V2_V2_STATIC :
#VER_PI32V2_V2_DMS_STATIC  :
#VER_PI32V2_EST  : BR23
#VER_PI32V2_DSP  : BR18
#VER_PI32		: BR21
#export CONFIG_AEC_VER = VER_PI32V2_V2_STATIC
export CONFIG_AEC_VER = VER_PI32V2_V2_DMS_STATIC

#NS_Ver Define:
#ANS:经典单mic降噪算法
#DNN_NS:神经网络单mic降噪算法
export CONFIG_NS_VER = ANS
#export CONFIG_NS_VER = DNN_NS
ifeq ($(CONFIG_NS_VER),DNN_NS)
CC_DEFINE += -DCONFIG_DNS_ENABLE
endif

ifeq ($(CONFIG_CURRENT_SOUND_DEAL),y)
CC_DEFINE += -DCONFIG_CURRENT_SOUND_DEAL_ENABLE
endif

ifeq ($(CONFIG_ASR_ENABLE),y)
CC_DEFINE += -DCONFIG_ASR_ENABLE
CC_DEFINE += -DCONFIG_DMS_MALLOC
endif


#Support Audio Onchip
export CONFIG_AUDIO_ONCHIP = y

ifeq ($(CONFIG_MMU_ENABLE),y)
CC_DEFINE += -DCONFIG_MMU_ENABLE


export CONFIG_MMU_VERSION = v1

endif

ifeq ($(CONFIG_SBC_CODEC_HW),y)
CC_DEFINE += -DCONFIG_SBC_CODEC_HW
endif

ifeq ($(CONFIG_MSBC_CODEC_HW),y)
CC_DEFINE += -DCONFIG_MSBC_CODEC_HW
endif


#AEC config begin------------------------------------
ifeq ($(CONFIG_AEC_VER),VER_PI32)
CC_DEFINE += -DCONFIG_AEC_VER_PI32
endif
ifeq ($(APP_CASE),earphone)
CC_DEFINE += -DCONFIG_AEC_M=128
else ifeq ($(APP_CASE),earphone_ai)
CC_DEFINE += -DCONFIG_AEC_M=128
else
CC_DEFINE += -DCONFIG_AEC_M=256
endif
#AEC config end--------------------------------------

ifeq ($(CONFIG_AUDIO_ONCHIP),y)
CC_DEFINE += -DCONFIG_AUDIO_ONCHIP
endif

export CONFIG_MMU_VERSION = v1

ifeq ($(CONFIG_PSRAM_ENABLE),y)
CC_DEFINE += -DCONFIG_PSRAM_ENABLE
endif

ifeq ($(MEDIA_NEW_ENABLE),y)
CC_DEFINE += -DCONFIG_MEDIA_NEW_ENABLE
endif

ifeq ($(MEDIA_NEW_ENABLE),d)
CC_DEFINE += -DCONFIG_MEDIA_DEVELOP_ENABLE
CC_DEFINE += -DCONFIG_MEDIA_EFFECT_DISABLE
CC_DEFINE += -DCONFIG_MIXER_CYCLIC
endif

CC_DEFINE += -D__GCC_PI32V2__

ifeq ($(NEW_ECC),y)
CC_DEFINE += -DCONFIG_NEW_ECC_ENABLE
endif

# --------------Project path Setting-----------------------
#
export DIR_OUTPUT = $(ROOT)/cpu/$(CPU_DIR)/tools
ifneq ($(cibuild),y)
ifeq ($(HOST_OS), linux)
export POST_BUILD_SCRIPT = $(ROOT)/cpu/$(CPU_DIR)/tools/download.sh
else
export POST_BUILD_SCRIPT = $(ROOT)/cpu/$(CPU_DIR)/tools/download.bat
endif
else
export POST_BUILD_SCRIPT = $(ROOT)/cpu/$(CPU_DIR)/tools/download.bat
endif

# - output file
export ELF= sdk
OUTPUT_ELF= $(addprefix $(DIR_OUTPUT)$(SLASH), $(ELF))
export OUTPUT_ELF:= $(addsuffix .elf, $(OUTPUT_ELF))

BUILD_LD=sdk.ld
BUILD_MAP=sdk.map

export LINKER = \
-T$(addprefix $(ROOT)/cpu/$(CPU_DIR)/, $(BUILD_LD)) \
-M=$(addprefix $(DIR_OUTPUT)$(SLASH), $(BUILD_MAP))


#
# --------------CBP Setting-----------------------
#
ifeq ($(APP_CASE), mesh)
export CBP_TITLE = AC637N_$(APP_CASE)$(PROJECT_SUFFIX)
else ifeq ($(APP_CASE),hid)
export CBP_TITLE = AC637N_$(APP_CASE)$(PROJECT_SUFFIX)
else ifeq ($(APP_CASE),spp_and_le)
export CBP_TITLE = AC637N_$(APP_CASE)$(PROJECT_SUFFIX)
else
export CBP_TITLE = AC897N_AD697N_$(APP_CASE)$(PROJECT_SUFFIX)
endif

export CBP_COMPILER = pi32v2_r3_lto_compiler
export CBP_ADD_OPT =
export CBP_POSITION ?= .

export NEED_USED_LIST = y

#
# --------------Architecture & Complier Setting-----------------------
#
-include tools$(SLASH)compiler$(SLASH)Makefile.$(CORE)_$(COMPLIE_MODE)_r3

ifeq ($(FLOAT_DEBUG),y)
CC_DEFINE += -DCONFIG_FLOAT_DEBUG_ENABLE
CC_ARGS += -mllvm -floating-point-may-trap=true
LD_ARGS += --plugin-opt=-floating-point-may-trap=true
endif

CC_ARGS += \
-fms-extensions \
-DSUPPORT_MS_EXTENSIONS


pre_make:
	@echo "Making... Soc : br30"
