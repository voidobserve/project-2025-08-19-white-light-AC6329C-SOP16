#
# --------------Basic Setting-----------------------
#
#配置下载编译方式(/lto)
COMPLIE_MODE=

#配置下载CPU架构(/pi32/pi32v2/q32/q32s)
export CORE=q32s

#配置项目文件指向(br16/br17/br20/br21/br22/bd29)
export CPU=bd29
export CPU_DIR=bd29

#配置项目的目标机器型号(generic(开发板)/...)
export BOARD=generic

#配置是否FPGA 验证平台(FPGA/CHIP)
# export TYPE=CHIP
export TYPE=CHIP

#配置下载匹配(br17_sdk/br20_sdk/br21_sdk/br18_sdk/bd29_sdk)
export NICKNAME=bd29_sdk

export NEW_BREDR = n
export RTOS = FREE_RTOS
export SERVER_CORE = lite
export NEW_ECC ?= y
export THIRD_PARTY_PROFILE_ENABLE = y

export CC_DEFINE += \
-DCONFIG_CPU_BD29 \


#-DCONFIG_RELEASE_ENABLE

export cibuild ?= n
ifeq ($(cibuild),y)
CC_DEFINE += -DCONFIG_RELEASE_ENABLE
endif

ifeq ($(HOST_OS), linux)
ifneq ($(cibuild), y)
CC_DEFINE += -D__SHELL__
endif
endif

ifeq ($(TYPE),FPGA)
CC_DEFINE += -DCONFIG_FPGA_ENABLE
endif

# --------------Project path Setting-----------------------
ifeq ($(RTOS),FREE_RTOS)
CC_DEFINE += -DCONFIG_FREE_RTOS_ENABLE
endif

-include apps$(SLASH)app_cfg

export OS_IN_MASKROM = y
export CVSD_CODEC_IN_MASKROM = n

export CONFIG_MMU_ENABLE = y
export CONFIG_SBC_CODEC_HW = n
export CONFIG_MSBC_CODEC_HW = n
export CONFIG_AAC_CODEC_HW = n

#Support Audio Onchip
export CONFIG_AUDIO_ONCHIP = n

export MEDIA_NEW_ENABLE = n

ifeq ($(CONFIG_MMU_ENABLE),y)
CC_DEFINE += -DCONFIG_MMU_ENABLE
endif

ifeq ($(CONFIG_SBC_CODEC_HW),y)
CC_DEFINE += -DCONFIG_SBC_CODEC_HW
endif

ifeq ($(CONFIG_MSBC_CODEC_HW),y)
CC_DEFINE += -DCONFIG_MSBC_CODEC_HW
endif

ifeq ($(CONFIG_AUDIO_ONCHIP),y)
CC_DEFINE += -DCONFIG_AUDIO_ONCHIP
endif

ifeq ($(MEDIA_NEW_ENABLE),n)
CC_DEFINE += -DCONFIG_MEDIA_ORIGIN_ENABLE
endif

CC_DEFINE += -D__GCC_Q32S__

ifeq ($(NEW_ECC),y)
CC_DEFINE += -DCONFIG_NEW_ECC_ENABLE
endif

#
# --------------Project path Setting-----------------------
#
export DIR_OUTPUT = $(ROOT)/cpu/$(CPU)/tools
ifneq ($(cibuild),y)
ifeq ($(HOST_OS), linux)
export POST_BUILD_SCRIPT = $(ROOT)/cpu/$(CPU)/tools/download.sh
else
export POST_BUILD_SCRIPT = $(ROOT)/cpu/$(CPU)/tools/download.bat
endif
else
export POST_BUILD_SCRIPT = $(ROOT)/cpu/$(CPU)/tools/download.bat
endif

# - output file
export ELF= sdk
OUTPUT_ELF= $(addprefix $(DIR_OUTPUT)$(SLASH), $(ELF))
export OUTPUT_ELF:= $(addsuffix .elf, $(OUTPUT_ELF))

# export DEBUG_ELF= $(addprefix apps$(SLASH), $(OUTPUT_ELF))

BUILD_LD=sdk.ld
BUILD_MAP=sdk.map

export LINKER = \
-T$(addprefix $(ROOT)/cpu/$(CPU)/, $(BUILD_LD)) \
-M=$(addprefix $(DIR_OUTPUT)$(SLASH), $(BUILD_MAP))

#
# --------------CBP Setting-----------------------
export CBP_TITLE = AC631N_$(APP_CASE)$(PROJECT_SUFFIX)
export CBP_COMPILER = q32s_lto_compiler
export CBP_ADD_OPT =
export CBP_POSITION ?= .

export NEED_USED_LIST = y

#
# --------------Architecture & Complier Setting-----------------------
#
-include tools$(SLASH)compiler$(SLASH)Makefile.$(CORE)$(COMPLIE_MODE)

CC_ARGS += \
-fms-extensions \
-DSUPPORT_MS_EXTENSIONS


pre_make:
	@echo "Making... Soc : bd29"

